// Code generated by go-bindata.
// sources:
// static/index.html
// static/main.css
// static/main.js
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x57\x51\x8f\xe3\x34\x10\x7e\xe7\x57\x58\x16\x48\x20\xd1\xa4\x7b\x3a\x84\x28\x69\x1e\xe0\x84\x40\xc0\x03\x1c\x6f\x08\x9d\xdc\x64\x5a\xfb\xd6\x89\xbd\xf6\xb4\xab\xb2\xec\x7f\x67\xec\x24\x9b\xb4\x4d\xf7\x7c\x07\x12\x2f\xec\x43\x53\x3b\xdf\x7c\x33\x9e\xf9\x66\xdc\x2d\x24\x36\x9a\xb5\xbb\x85\xb0\x76\xcd\x5b\xc0\x9d\x13\x56\xf2\xb0\x53\x99\x16\x9d\xd1\x1a\xdc\x9a\x7f\x8f\x68\x7f\x52\x1e\xbf\x45\xa7\x79\xf9\x11\xa3\xbf\x42\x82\xa8\xbb\xaf\x71\x89\x0a\x35\x94\xbf\x3f\x3c\x38\xb8\xf3\x99\x86\x76\x87\xf2\xf1\xf1\x0f\x66\x45\x75\x0b\xb8\x01\x81\xec\x1e\x36\xcc\xec\xd1\xee\xb1\xc8\x3b\xf8\x68\xee\x2b\xa7\x2c\x32\xef\xaa\x35\x97\xe4\x6d\x95\xe7\x55\xdd\x66\x1b\x63\xb0\xf2\x3e\xab\x4c\x93\xbf\xbd\xdb\x83\x3b\xe6\x37\xd9\x57\xd9\x4d\xbf\xc8\x1a\xd5\x66\x6f\x3d\x2f\x8b\xbc\x23\x78\x3f\x46\xdf\x0a\x9b\xf9\xc3\x2e\x5f\x66\x2f\x89\x73\x58\x2e\xfe\x19\xab\x68\x77\x7b\x2d\x1c\x31\x50\xac\x2f\xb3\x97\x4f\x1b\xff\x0a\xed\x82\xb2\xe8\x4d\xc8\x29\xb1\x2f\xb3\xe5\xe5\x7e\xaa\x9f\xbc\x11\xd7\x81\x5a\xb5\xb7\x4c\x3a\xd8\x0e\x38\x0a\x83\x33\x07\x7a\xcd\x3d\x1e\x35\x78\x09\x80\x83\x14\xf2\x51\x0b\xc5\xc6\xd4\xc7\x09\x8f\x7c\x51\x8e\x0a\x20\xe0\x8b\xf1\xdd\x6f\x47\x0b\xab\x49\x68\xa0\xa1\xc2\xa0\xbc\xc6\xd4\xc1\x8f\x75\x06\x8d\x0f\x28\x3e\x1a\x45\xa8\xb1\xa8\x4c\xcb\x0e\x42\xef\x61\xcd\x79\x29\xb4\x2e\xf2\x6e\xf3\x59\x64\xc8\x2c\x2f\xc3\x67\x12\xbc\x81\xa6\x12\x95\x24\xf7\xc3\xb7\x24\x33\x07\xb5\xa2\xa4\xc6\x47\x9a\x9f\xa3\xbf\xa3\xb6\x8a\x8f\x24\x03\x94\x4e\x6d\x29\xfb\xdd\xf3\xd2\x84\xea\x19\x93\x39\xee\x7c\xa7\x34\x82\x9b\x64\x5b\xb5\xd4\x86\xd3\x64\x0b\x24\x40\x3b\xc9\x74\x51\xab\x03\xab\xb4\xf0\x3e\x1c\x89\xda\xcd\xa3\x3f\x2f\x04\x8a\x8d\x06\x76\xaf\x6a\x94\x6b\x7e\xb3\x5c\x7e\x72\x06\xe8\x40\xa7\x93\xe2\xf4\x9d\xbb\xf6\x42\x0e\xb4\x5f\x10\x69\x10\x01\xcd\x0c\xf9\x4e\xf0\x4d\x44\xab\x26\x11\x1d\x02\x7e\x0d\xee\x00\xee\x07\x9b\x64\x11\xe8\x5f\xa3\xc0\xbd\x4f\x86\xff\x0c\x28\x4d\x9d\x06\x0f\xf1\xfc\x12\x06\x5b\x7a\x30\xea\xcf\xb4\xb3\x06\xf0\xab\xbd\x13\x41\x29\xcf\x18\xe4\x73\x15\x09\xf8\xd9\x1a\x52\xfd\x82\x86\x1c\x58\xea\xee\x28\x13\xa6\x5a\x16\x6e\x00\xf6\x57\x78\xf4\xb2\x1b\x3b\x79\x35\xe8\x2c\xde\x30\x5a\x55\xb7\x34\x4f\xa4\xb9\x7f\x05\x28\x94\xfe\xf4\x63\x38\x40\x8b\x9f\x07\xd3\xcf\x66\xa4\xd4\xb9\xac\xcb\x87\x87\x80\xc8\x90\x08\xd9\xe3\x23\x45\x77\x55\x5e\x23\x96\x34\xe1\x51\x34\x36\xd5\x40\x05\xe4\xaa\x5f\x58\xe3\x30\xd5\xd0\x47\x79\xa4\xa2\x9b\xa8\x8e\x54\x74\xbc\xf4\x52\xc1\x9b\x23\x82\x7f\x43\x17\x6e\x4e\x9d\xb9\x24\xab\x1f\xbf\x49\xb2\x73\xe0\xad\x69\x3d\x84\x94\x91\x55\xe3\xe7\xad\x2e\xa5\x42\x3b\x61\x1e\x4c\xe7\x10\xcd\x90\xb3\x89\xa2\xea\x35\xaf\x63\xb5\x39\x8b\x37\xc9\x9a\x47\x85\xae\x66\xc6\xc7\x93\x41\x3f\x7f\x16\x83\x61\x3f\x96\xc2\x24\x5f\x9c\x91\x6d\xb5\x11\xb8\x62\x1a\xb6\xf8\xf5\xdc\x34\x3a\xa7\xdc\x2a\x47\x9f\x74\xdd\xc1\x13\xed\x64\x6b\x3e\x59\xbd\xed\x4c\x4a\x4e\xce\x7b\xd5\x67\x68\xa6\xf1\x10\x61\x71\xad\x28\x09\xf3\x75\x04\x9f\xf4\xa2\x0c\x9d\xd8\x5d\x03\x50\xff\x4a\x65\x0d\xc9\xca\xfa\x08\xde\x04\xa7\xe0\xce\xe7\xf9\x25\x65\x14\x85\xcc\x5a\xd1\x3c\xdf\x69\x13\x8b\x21\xdc\x2f\x43\xb4\x85\x1d\x8e\xb9\x71\x20\x6e\x17\x74\x53\xf3\x8e\x32\x5e\x65\x91\xd3\x96\xcf\xf3\xce\xcf\xa4\xfe\xcd\xa9\xe0\xc6\x17\xf3\x85\xb0\x0e\x4e\x0a\x11\x7e\xac\x3c\x15\x22\x2e\x42\x70\xd3\xac\xf5\xc8\x2e\x50\x07\xe7\x82\xbf\x70\x33\xa9\x75\xd7\x45\xef\xa1\x59\xa7\x76\xf2\x5d\xa2\xed\x49\x3f\x4c\xb5\x9d\xf1\x07\xc8\xb6\xf7\xfa\x5f\xea\xb6\x0b\xe1\x7f\xe1\xf6\xa5\x48\x51\x6e\x07\x4d\x92\xee\x64\x59\xe4\xdd\x4f\x78\xfa\xb1\x4e\xff\x1b\x96\x7f\x07\x00\x00\xff\xff\x96\xde\xfa\xf2\x22\x0e\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 3618, mode: os.FileMode(511), modTime: time.Unix(1460836759, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMainCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x53\xc1\x8e\xd3\x30\x10\xbd\xe7\x2b\x2c\x21\xb4\x20\xad\xab\x2e\x62\x0f\xa4\x47\xee\xfc\x83\x93\x19\xd7\xa3\x4e\x3d\xc6\x9e\x6c\x5a\x21\xfe\x1d\x27\x4d\x28\xcb\xaa\x15\xe4\x12\x65\xc6\xef\xbd\x79\xcf\x93\x4d\xc6\xef\x03\x16\x2d\xe6\x47\x63\xea\x13\x90\xf6\x41\x5b\xf3\x79\xbb\x4d\xa7\xdd\x5c\x92\x17\xcc\x9e\x65\x6c\x4d\xe9\xb3\x30\xef\x9a\x9f\xcd\x26\xa8\x26\x0b\xa8\x8e\x78\x41\x8e\x04\x1a\x2a\xf0\xcb\xfb\xdd\x2b\xa6\x4f\xcf\xbf\x99\x3a\xc9\x80\xb9\x35\x4f\xe9\x64\x8a\x30\xc1\x2d\x81\xa9\x0a\x54\x12\xbb\x73\x6b\x3a\x96\xfe\x70\xa9\x79\x89\x6a\xbd\x3b\x12\xd7\xfa\xc3\x57\x19\x32\x61\x36\xdf\x70\x7c\x78\x34\xcb\xd7\xa3\x39\x4a\x94\x92\x5c\x8f\xd3\xa0\xea\x3a\xc6\x65\xc2\x8b\xbc\x55\x49\x6f\x46\x58\x5a\x9d\xa8\xca\xf1\x4d\xf7\x7f\x65\x27\xcc\x2c\x6c\xab\x01\x19\x6a\x08\x9e\x4e\x08\x73\x70\x9d\xc0\xf9\x75\x62\x4f\xdb\xed\x12\xd9\x58\xa7\xb0\x5d\x46\x77\xa8\xae\xa7\x97\x75\x6b\x1a\xc9\x01\x50\xdc\x5b\x46\x5f\xe9\x9e\xd7\x44\xd7\x72\xbe\x64\x3d\xd7\x27\x91\x15\xbc\x2a\xdd\x26\xbe\x86\xef\x06\x95\x0a\x6e\xae\x2b\xa1\xb0\xe2\x03\x29\xda\xd9\x5d\x6b\xa2\x8c\xd9\xa5\xbf\xd1\x81\x00\x30\x2e\xde\xf1\xa4\xf6\xda\x42\x66\x4a\x85\xca\xf5\x3e\x34\x2c\xc4\xf3\x49\xc7\xb4\x8f\xad\x99\xac\xfd\x71\x24\xb7\x51\x83\xed\x03\x31\x7c\xc0\x17\x8c\x1f\xd7\x5b\x74\xfd\x61\x9f\x65\x88\x60\x7b\x61\xa9\xeb\xf4\x0e\x11\x6f\x00\x05\xe0\x0e\xce\x7b\x7f\x07\xd7\x86\xc9\xc2\x4d\xf4\xb9\xda\x92\xf1\xde\xc0\xff\x4c\xd0\x6c\x3c\xe5\xa2\x96\x29\xae\xbb\x3a\xaf\xdc\xb8\xfc\x42\x9d\xf0\xbc\x3c\xbf\x02\x00\x00\xff\xff\x98\x0d\xa5\x79\xad\x03\x00\x00")

func staticMainCssBytes() ([]byte, error) {
	return bindataRead(
		_staticMainCss,
		"static/main.css",
	)
}

func staticMainCss() (*asset, error) {
	bytes, err := staticMainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.css", size: 941, mode: os.FileMode(511), modTime: time.Unix(1460837426, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMainJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x56\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x28\x42\xb0\x92\x61\x2f\x93\x5e\xed\x35\xd0\x62\x8b\x45\x50\xec\x07\xd0\x4d\x7b\x49\x8d\x82\x2b\x8f\x2d\x61\x69\x52\x21\xa9\xb8\x46\xe0\xff\xde\xa1\x48\x4a\x14\xa5\xb4\x39\xaf\x0e\xb6\x48\xbe\x19\xce\x3c\xf2\x8d\x86\xf2\x43\xc3\xa8\x24\x47\xb1\x6b\x18\xe4\x19\x3f\x7c\xa8\x98\x06\x99\x2d\x93\x87\xed\x9c\xec\xdb\x41\x9e\x49\x78\xec\xe6\xf7\x0d\x2f\x74\x25\x78\x3e\x4f\x9e\x67\x09\x3e\x12\x74\x23\x79\x3f\x5f\x69\x38\xaa\x65\x52\x4b\xa1\x85\xba\x3f\xd7\x80\xef\x54\xa3\x31\xf7\x16\xe6\x79\xa2\x12\x2d\x55\xc3\x74\xb2\xc1\xbd\xd6\xdd\x42\xb5\x4f\xf2\xab\xde\x38\x79\xf3\x26\xb9\xf2\xf6\x1d\x28\xd8\xb7\xdd\x6e\x3d\xeb\x96\x7c\x1c\xc9\x01\xf4\x27\xaa\x8b\xf2\x43\x1c\x70\xe4\x60\x10\x78\x8c\xf1\x11\x0d\x03\x32\x48\xa2\xcd\xe0\x6a\x13\x24\x3a\x65\x1c\x6e\x44\x99\x82\xf5\x08\x71\x99\x4d\xec\x98\x7b\xce\xba\xed\x1e\x1b\x90\x67\xa2\xc5\x47\x71\x02\xf9\x9e\x2a\xc8\xe7\xa4\xe2\x3b\xf8\xe7\xcb\x3e\x77\xd8\xe1\xea\x3c\x79\x97\xdc\xbe\x26\xa4\xd7\x44\xe4\xf0\x5a\x36\x51\x06\x97\x7e\x18\xbc\x9a\xd3\x3d\x7a\xf2\xf1\x80\xc7\x67\xd1\x63\xf7\x42\x26\xb9\x31\xa8\x10\x78\xbb\xc6\xbf\x77\xf6\x50\x09\x03\x7e\xd0\x25\xce\x2c\x16\x71\x1e\x2d\x1e\x41\x68\xd2\x62\x1f\xaa\xed\x30\x2e\x73\x68\x5d\x04\xf6\x68\xa7\xb8\xb0\x57\x90\xd4\x8d\x2a\x2d\x28\xca\x6e\x36\x7e\x73\x54\x58\x4b\x0b\xc7\xcc\x2f\x68\x69\x82\xa2\x75\x8d\x31\x8d\x74\x05\xfa\x20\x69\x5d\x1a\x5d\x65\x6e\xf1\xed\x09\xbe\x29\x51\x7c\x07\x8d\xb3\xbd\xf2\xb6\xf3\x19\xfa\x20\x7b\x5a\x68\x21\xcf\xad\xe9\x8e\x6a\x1a\x2a\xef\xba\xb3\xf4\x29\x99\x9d\x0d\xea\xab\x96\x40\x0d\x29\x3d\x24\x4f\x4f\x6a\x75\x73\x93\x26\x8b\x84\x89\x82\x1a\x07\xa4\x14\x4a\xe3\x38\xbd\x31\x36\xa9\xcb\xd9\xf8\x50\xad\xbd\x42\x07\xcf\x97\x7e\x16\xe5\xaf\x02\x95\xf6\x1b\x11\xc1\x3f\x81\x52\xf4\x00\x79\x17\xdc\xd1\x4e\xc4\x5a\x07\x74\xf0\xdb\xd7\x2f\x9f\x49\x4d\x25\xde\x4e\x87\x22\xc6\xd7\x3c\x12\xff\x48\x47\x96\xf1\xf5\xc4\x59\x00\xd1\x15\xba\xd2\xf4\x68\x58\x87\x87\xec\xe7\x6e\x9c\x05\x17\x02\x08\xa6\xd0\xe0\xbc\x61\x86\x68\x59\x1d\xf3\x6e\x6a\x3e\x84\xa9\x5a\x70\x05\x43\x9c\x9d\x8b\xc2\x04\x5b\x00\x36\x9b\x24\x2b\xb5\xae\xb3\x38\x68\x20\x18\x86\x6e\x0c\x71\x40\x0c\x82\x14\x62\x17\x89\x07\xac\xaa\x5b\x88\x0b\xe7\xef\x46\x56\xeb\xd9\xe8\xae\x97\x40\x77\x20\x55\x54\x2b\x87\xab\xbf\x48\x19\x7a\x22\xaa\x66\x15\x1e\xff\x5f\x3c\x8d\x6e\x75\xaf\xb8\x8d\xd3\x5b\xe7\xe0\xbf\x34\xe7\x77\xa3\xed\x3e\x9d\x09\x4a\xcf\x6d\x95\xad\xb2\xf9\xb8\xbe\xb9\xd0\xad\xc6\x9e\x33\x4e\x8f\x90\xad\x8c\x93\x87\xdb\x2d\x5e\xfc\x27\xca\x1a\x3f\xf1\xd3\xf6\xf2\xa2\x00\x2d\x5f\x2d\x91\x9e\xaa\x9e\x14\xf7\x16\x11\xf7\x32\x69\x31\x61\xf6\x84\x7f\x64\xc6\x6c\x86\xff\x4b\xd9\x40\x02\x38\xa0\xa7\x00\x10\xd6\xc0\x47\x17\x9e\x97\xc5\x25\xa8\x22\x46\xd4\xa6\x84\x0c\xe0\xab\xf6\x77\xd9\xcd\xb9\x52\xb3\xf2\x2f\xc1\xca\x99\x17\xab\x71\x9f\xe1\x9f\xa0\xfc\x28\xe0\xbb\x3c\x35\xf8\xf0\xc0\x2e\xbe\x26\xdb\xad\xdb\x6a\x6d\x8c\x4c\x91\x6e\x6b\x6b\x21\xb8\x96\x82\x31\xd3\xda\xdc\x21\x3d\x1f\x2b\xa5\xdf\x6b\xc9\x82\x1a\x9b\xe4\xd7\xaa\x10\xa6\x77\x71\xf5\xd7\x47\x61\xa7\x89\x2b\x89\x6e\xb1\x1d\xae\xc3\x75\x55\x8a\xd3\xaf\xa0\x69\xc5\x10\xd5\x17\x6e\x78\x02\xae\x97\x86\x89\x30\x2b\x6f\x03\x0c\x0a\x0d\xbb\xdf\xe1\x11\x8d\x10\x33\xfc\x9e\x6a\x73\x87\xac\x07\x52\x34\x52\xe2\xff\x3d\x95\xf8\x65\x1d\xd6\xa5\xd8\x99\x38\xc5\x04\x5e\x4f\x61\x08\xb6\x10\x12\xb9\xd4\x67\x06\xe9\x32\x49\xc7\x84\x4e\x45\x2a\x4e\x18\x93\x96\x3d\xf4\x3a\xd7\x72\xe4\xeb\x1b\x2d\xbe\x1f\xa4\x68\xf8\xee\x6d\x21\x98\x90\xab\x84\x55\x87\x12\xbf\x88\x00\x9d\xd2\x2e\x21\x7b\x98\xd4\x9d\x68\xab\x75\x47\x5d\x44\xd9\x54\xd3\x80\x10\x72\xe7\xa4\xe3\x45\xb9\x58\x54\x53\xad\x43\x69\x09\xf6\xf0\xc9\xee\xa1\x24\x9f\x51\x78\xa6\xc0\xa7\x26\x98\x74\xba\x7d\x68\x6f\x57\x49\xfe\x34\x9a\x7c\x75\xef\xc0\x1b\xc6\x26\xd2\x1e\xd2\xda\x83\xdc\xb2\xed\xc6\xdb\x1e\x14\x63\xfa\x43\x56\xe9\x60\x59\x48\x4c\xc5\xac\xdc\xfb\x4f\xa0\x5b\xf7\x97\xd4\xe8\xc4\x34\x5e\xa8\x82\x7f\x03\x00\x00\xff\xff\x6c\xde\xb3\x57\xf8\x0b\x00\x00")

func staticMainJsBytes() ([]byte, error) {
	return bindataRead(
		_staticMainJs,
		"static/main.js",
	)
}

func staticMainJs() (*asset, error) {
	bytes, err := staticMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.js", size: 3064, mode: os.FileMode(511), modTime: time.Unix(1460836577, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
	"static/main.css": staticMainCss,
	"static/main.js": staticMainJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
		"main.css": &bintree{staticMainCss, map[string]*bintree{}},
		"main.js": &bintree{staticMainJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

