// Code generated by go-bindata.
// sources:
// static/index.html
// static/main.css
// static/main.js
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x57\x4d\x6f\xe3\x36\x10\xbd\xf7\x57\x10\x44\x0b\x74\x81\x5a\x72\x76\xd3\x2f\xd7\xf6\xa1\x59\x14\x2d\xda\x1e\xda\xec\xad\x28\x02\x5a\x1a\x9b\x4c\x28\x91\x21\xc7\x0e\xdc\x34\xff\xbd\x43\x4a\x8e\x64\x5b\xf6\x32\xbb\x05\x7a\x69\x0e\x91\x48\xbe\x37\x1c\xcd\xbc\x19\xd2\x53\x89\x95\x66\xf5\x6a\x24\xac\x9d\xf1\x1a\x70\xe5\x84\x95\x3c\xcc\x14\xa6\x46\x67\xb4\x06\x37\xe3\x3f\x22\xda\x5f\x94\xc7\x2b\x74\x9a\xcf\x3f\x61\xf4\x37\x95\x20\xca\xe6\x35\x0e\x2b\x40\xc1\x0a\x29\x9c\x07\x9c\xf1\x35\x2e\x47\xdf\xf0\xde\x32\x2a\xd4\x30\xff\xe3\xf1\xd1\xc1\xbd\xcf\x34\xd4\x2b\x94\x4f\x4f\x7f\x32\x2b\x8a\x3b\xc0\x05\x08\x64\x0f\xb0\x60\x66\x8d\x76\x8d\xd3\xbc\x81\x77\x74\xad\xea\x3b\x26\x1d\x2c\x67\xbc\x12\xaa\xce\x0a\xef\x39\x73\xa0\x67\xdc\xe3\x56\x83\x97\x00\xc8\x87\xf1\x92\x7c\x9f\xe4\x79\x51\xd6\xd9\xc2\x18\x24\x66\x56\x98\x2a\x0f\xef\x1e\xe9\x6b\xf3\x37\xd9\x9b\xec\xab\x9c\xe6\xbb\xb9\xac\x4a\xd8\xc3\x17\x4e\x59\x64\xde\x15\x27\x37\xb9\xbd\x5f\x83\xdb\xe6\x17\xd9\xb7\xd9\x45\x3b\x88\xa6\x6f\x3d\x9f\x4f\xf3\xc6\xc0\xcb\x2c\xfa\x9a\xbc\xf3\x9b\x55\x3e\xce\x2e\xc9\xe6\x6e\x38\xfa\x38\xab\xa2\x5e\xad\xb5\x70\x64\x81\x7c\xbd\xcc\x2e\x9f\x27\xfe\x15\xb3\x23\xca\xac\x37\x21\xcf\x64\x7d\x9c\x8d\x8f\xe7\x3f\x72\x9f\xc3\x5c\xde\x1e\xa6\x32\xc1\x74\x94\xd5\x31\x6e\x9a\x77\x3a\x9f\x2e\x4c\xb9\xed\xd1\xe5\xeb\x79\x27\x5f\x02\xbe\xee\xad\x95\x6a\xc3\x0a\x2d\xbc\xa7\xaa\x12\x9b\x9e\x6c\xde\x6d\x2d\x4c\x7a\x2e\x80\x86\x02\x43\xbd\x55\xa6\x0c\x5a\xb3\xce\xa0\xf1\x01\xd5\x23\x45\xa8\xb1\xa8\x4c\xcd\x36\x42\xaf\x61\xc6\xf9\x5c\x68\x3d\xcd\x9b\xc9\xb3\xc8\x10\x34\x3e\x0f\xff\x93\xe0\x15\x54\x85\x28\x24\x6d\xbf\x7b\x4b\xa2\x39\x28\x15\x45\x2f\x3e\xd2\xf6\xd9\xfa\x7b\x6a\x26\xf1\x91\x44\x40\xe9\xd4\x92\x2a\xb0\x79\x1e\x53\x28\x71\x31\x98\xdd\xcc\x0f\x4a\x23\xb8\x5e\xb4\x55\x4d\xdd\xa5\x1f\x6c\x81\x04\xa8\x29\xd2\x87\x18\x55\x86\xb2\x37\x96\x33\xa4\x54\xcc\xf8\x62\x8d\x68\x6a\xbe\xf3\xe5\x3a\x2e\x85\x2e\xa9\x55\x71\xd7\x40\x43\x83\x84\xfa\xf3\x4f\x61\x03\x35\xbe\xe2\xf9\x7c\xc8\x66\xa1\x41\xb8\x13\x46\xaf\x9a\xb5\xce\x6a\x04\xff\x0e\xd4\x37\x3c\xfa\x41\xc3\x39\xe9\x6c\x58\x75\xae\xa5\x1d\xaa\x08\xc5\x42\x03\x7b\x50\x25\xca\x19\xbf\x18\x8f\x3f\x3b\x00\x34\xa0\xfd\xe6\xbe\xbf\xe6\x4e\x2d\xc8\x9d\xd9\x2f\xc9\x68\x50\x30\xf5\x71\xf9\x5e\xf0\x45\x70\xe1\x9d\xaa\x5e\x80\xbe\xd2\x8a\x22\xf1\x93\x4d\x67\x5c\x83\xdb\x80\x4b\x64\x04\xf7\xaf\x51\xe0\xda\x27\xc3\x7f\x05\x94\xa6\x4c\x82\x5f\x06\x7f\x7e\x0b\x47\x41\xba\x33\xea\xaf\xb4\xe8\x04\xf0\xdb\xb5\x13\xa1\x30\xce\x10\xf2\xa1\x1c\x06\xfc\x60\xd6\x29\xe3\x41\x93\x0e\x2c\xb5\xb9\x28\x2c\xa6\x6a\x16\xce\x71\xf6\x77\x78\xb4\x55\xd6\x35\xae\xc9\xae\xac\xfa\x05\x22\xcd\xc3\x5b\xba\x22\x28\xdd\xea\xf8\x8b\x40\x7d\x35\x20\xbe\x66\xcb\x72\xfe\xf8\x18\x10\x59\xa8\x14\xf6\xf4\x44\xde\x9d\x14\x64\x87\x25\x15\x79\x14\x95\x4d\x25\x14\x51\x48\x37\x2a\x10\x26\xfb\x73\xd6\x38\x4c\x35\xb3\xc7\x7f\x09\xd1\x47\x95\xa5\xa2\xab\x28\xb2\x54\x74\xbc\x6d\xa4\x82\x17\x5b\x04\x7f\x43\xb7\xaf\x9c\x5a\xc2\x98\x58\x3f\x7f\x9f\xc4\x73\xe0\xad\xa9\xe9\xca\x47\x91\x27\x56\xe5\x87\x59\xc7\x8a\xa3\x99\xd0\x88\xce\xb7\xb2\xd0\x30\xcb\x28\x1a\xce\xe2\x1d\x6c\xc6\xa3\xd0\x27\x03\x7d\xeb\x99\xd0\x36\xbe\xd1\x8e\xd8\xf6\xc3\x70\xfe\x8d\x0e\x8c\x2d\xb5\x11\x38\x61\x1a\x96\xf8\xdd\x50\x1b\x3c\x34\xb9\x54\x8e\xfe\xd3\xdd\x12\x9e\xcd\xf6\xa6\x86\x83\xd5\x72\x07\x42\xb2\xf7\xbd\x27\xf7\x0c\x35\xd9\x7d\x44\x18\x9c\x4a\x4a\x42\x63\xef\xc0\x7b\x25\x2d\x43\x41\x37\x87\x27\x94\x74\xde\x64\x21\x58\x59\xeb\xc1\x4d\xd8\x14\xdc\xe1\x41\x72\x6c\x32\x8a\x42\x66\xb5\xa8\xce\x17\x6c\x8f\xb1\x73\xf7\xeb\xe0\xed\xd4\xee\x3e\x73\xe1\x40\xdc\x8d\xe8\x7e\xc3\x1b\x93\xf1\x7c\x8c\x36\xed\xfc\xbc\xdd\xe1\xd6\xd6\xae\xec\x0b\xae\x5b\x18\x4e\x84\x75\xb0\x97\x88\x70\xf9\x7b\x4e\x44\x1c\x04\xe7\xfa\x51\x6b\x91\x8d\xa3\x0e\x0e\x05\x7f\xb4\x4d\x2f\xd7\x4d\x15\xbd\x40\xb3\x4e\xad\xe4\xfb\x44\xdb\x1a\xfd\x30\xd5\x36\xe4\x0f\x90\x6d\xbb\xeb\x7f\xa9\xdb\xc6\x85\xff\x85\xdb\xa6\x22\x45\xb9\x0d\x34\x49\xba\xbd\xe1\x34\x6f\x7e\x12\xd1\x8f\x1f\xac\xf4\xfc\x9f\x00\x00\x00\xff\xff\xd6\x84\xcc\xa1\x4e\x10\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 4174, mode: os.FileMode(511), modTime: time.Unix(1462660423, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMainCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x53\xc1\x8e\xd3\x30\x10\xbd\xe7\x2b\x2c\x21\xb4\x20\xad\xab\x2e\x62\x0f\xa4\x47\xee\xfc\x83\x93\x19\xd7\xa3\x4e\x3d\xc6\x9e\x6c\x5a\x21\xfe\x1d\x27\x4d\x28\xcb\xaa\x15\xe4\x12\x65\xc6\xef\xbd\x79\xcf\x93\x4d\xc6\xef\x03\x16\x2d\xe6\x47\x63\xea\x13\x90\xf6\x41\x5b\xf3\x79\xbb\x4d\xa7\xdd\x5c\x92\x17\xcc\x9e\x65\x6c\x4d\xe9\xb3\x30\xef\x9a\x9f\xcd\x26\xa8\x26\x0b\xa8\x8e\x78\x41\x8e\x04\x1a\x2a\xf0\xcb\xfb\xdd\x2b\xa6\x4f\xcf\xbf\x99\x3a\xc9\x80\xb9\x35\x4f\xe9\x64\x8a\x30\xc1\x2d\x81\xa9\x0a\x54\x12\xbb\x73\x6b\x3a\x96\xfe\x70\xa9\x79\x89\x6a\xbd\x3b\x12\xd7\xfa\xc3\x57\x19\x32\x61\x36\xdf\x70\x7c\x78\x34\xcb\xd7\xa3\x39\x4a\x94\x92\x5c\x8f\xd3\xa0\xea\x3a\xc6\x65\xc2\x8b\xbc\x55\x49\x6f\x46\x58\x5a\x9d\xa8\xca\xf1\x4d\xf7\x7f\x65\x27\xcc\x2c\x6c\xab\x01\x19\x6a\x08\x9e\x4e\x08\x73\x70\x9d\xc0\xf9\x75\x62\x4f\xdb\xed\x12\xd9\x58\xa7\xb0\x5d\x46\x77\xa8\xae\xa7\x97\x75\x6b\x1a\xc9\x01\x50\xdc\x5b\x46\x5f\xe9\x9e\xd7\x44\xd7\x72\xbe\x64\x3d\xd7\x27\x91\x15\xbc\x2a\xdd\x26\xbe\x86\xef\x06\x95\x0a\x6e\xae\x2b\xa1\xb0\xe2\x03\x29\xda\xd9\x5d\x6b\xa2\x8c\xd9\xa5\xbf\xd1\x81\x00\x30\x2e\xde\xf1\xa4\xf6\xda\x42\x66\x4a\x85\xca\xf5\x3e\x34\x2c\xc4\xf3\x49\xc7\xb4\x8f\xad\x99\xac\xfd\x71\x24\xb7\x51\x83\xed\x03\x31\x7c\xc0\x17\x8c\x1f\xd7\x5b\x74\xfd\x61\x9f\x65\x88\x60\x7b\x61\xa9\xeb\xf4\x0e\x11\x6f\x00\x05\xe0\x0e\xce\x7b\x7f\x07\xd7\x86\xc9\xc2\x4d\xf4\xb9\xda\x92\xf1\xde\xc0\xff\x4c\xd0\x6c\x3c\xe5\xa2\x96\x29\xae\xbb\x3a\xaf\xdc\xb8\xfc\x42\x9d\xf0\xbc\x3c\xbf\x02\x00\x00\xff\xff\x98\x0d\xa5\x79\xad\x03\x00\x00")

func staticMainCssBytes() ([]byte, error) {
	return bindataRead(
		_staticMainCss,
		"static/main.css",
	)
}

func staticMainCss() (*asset, error) {
	bytes, err := staticMainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.css", size: 941, mode: os.FileMode(511), modTime: time.Unix(1460837426, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMainJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x57\xdd\x6f\xdb\x36\x10\x7f\xf7\x5f\xa1\x6a\x41\x25\xc3\x29\x9b\xbe\xda\x0d\xb0\xa1\x45\x11\x0c\x4d\x0b\x34\xd9\x5e\xb2\x60\x60\xa4\xb3\x25\x54\x26\x15\xf2\x14\xcf\x08\xfc\xbf\xef\x8e\xfa\xa2\x3e\xda\xe5\x79\x7e\x48\xa4\xe3\xef\x3e\xf8\x3b\xde\xf1\x24\xd5\xae\x2a\xa4\x11\x7b\x9d\x56\x05\xc4\x91\xda\x7d\xca\x0b\x04\x13\x9d\x07\x77\xf7\x4b\xb1\x75\x2f\x71\x64\xe0\xb1\x93\x6f\x2b\x95\x60\xae\x55\xbc\x0c\x9e\x17\x01\xfd\x0c\x60\x65\x54\x2f\xcf\x11\xf6\xf6\x3c\x28\x8d\x46\x6d\x6f\x8f\x25\xd0\xb3\x44\x52\x56\xad\x06\xff\x9e\xa4\x21\x4d\x5b\x15\x18\x5c\x92\xaf\x4d\xb7\x90\x6f\x83\xf8\x55\xaf\x1c\xbc\x7e\x1d\xbc\x6a\xf5\x3b\x90\xe7\xd7\xb9\xdb\x2c\xba\xa5\x36\x8e\x60\x07\x78\x2d\x31\xc9\x3e\x8d\x03\x1e\x19\x18\x04\x3e\xc6\xb4\x11\x0d\x03\x62\xa4\x40\x7e\x79\x75\xe9\x6d\x74\x4e\xd9\x77\x24\x0b\x0b\x9b\x09\xe2\xb4\x98\xf1\x18\xb7\x9c\x75\xee\x1e\x2b\x30\x47\x81\xfa\xb3\x3e\x80\xf9\x20\x2d\xc4\x4b\x91\xab\x14\xfe\xf9\xba\x8d\x1b\xec\x70\x75\x19\xbc\x0f\x2e\x5e\x12\xd2\x4b\x22\x6a\xf0\x68\xaa\xd1\x0e\x4e\xfd\xab\xf7\xc8\xd9\xdd\xb7\xe4\x53\x82\xa7\xb9\xe8\xb1\x5b\x6d\x82\x98\x15\x72\x02\x5e\x6c\xe8\xdf\xfb\x3a\xa9\xa2\x00\xb5\xc3\x8c\x24\xab\xd5\x78\x1f\x0e\x4f\x20\x52\x71\xd8\xbb\xfc\x7e\x18\x17\x27\xad\x8b\xa0\x4e\xed\x1c\x17\xf5\x11\x14\x65\x65\xb3\x1a\x34\xda\xdd\x62\xfa\xd4\x50\x51\x6b\xd6\x70\xda\xf9\x89\x34\x39\x28\x59\x96\x14\xd3\xa4\xae\x00\x77\x46\x96\x19\xd7\x55\xd4\x2c\xbe\x39\xc0\x83\xd5\xc9\x77\x40\x92\xf6\x95\x77\xbf\x5c\x90\x0d\xb1\x95\x09\x6a\x73\x74\xaa\xa9\x44\xe9\x57\xde\x59\xa7\xd9\x6e\x89\x3d\x33\xea\x06\x0d\x48\x26\xa5\x87\xc4\xe1\xc1\xae\xdf\xbe\x0d\x83\x55\x50\xe8\x44\xb2\x01\x91\x69\x8b\xf4\x1e\xbe\x65\x9d\xb0\xd9\x33\xdb\xb0\x4e\xdf\x92\x81\xe7\x53\x2f\xa5\xf2\xb7\x5e\x95\xf6\x8e\x84\x56\xd7\x60\xad\xdc\x41\xdc\x05\xb7\xaf\x05\x3e\xd9\x9c\x8b\xb3\x38\xfa\xc5\xa2\x2e\xa3\xa5\x78\x92\x05\xd5\xe2\xe5\x65\x10\xdd\xa0\x34\x18\xcd\xd7\xe5\x66\x86\x7a\x0e\x06\x28\x92\xdf\x6f\xbe\x7e\x11\xa5\x34\x74\xcc\x1b\x77\x82\x83\x5a\x8e\xba\xc8\xa4\x20\xa7\x96\x07\xa6\x53\x32\xad\xe0\x10\x7c\x94\x08\x31\xdc\x45\xbf\x62\x4e\xe6\x51\xee\x4b\xca\x4a\xaf\x05\xa2\x93\x93\x42\x9c\x0a\x3e\xdd\x5a\x61\x16\x2f\x57\xef\x96\x8e\x57\x66\xdb\xc9\x9d\x29\x27\x0b\x3a\xd9\x95\xae\x8c\xad\x85\xeb\x4e\x78\x9d\xab\x0a\x81\xc4\x2b\x12\xae\x9c\xe8\x06\x12\xad\x52\x1b\x0f\x5c\x53\x2e\x2a\xf2\xcd\x29\x16\x68\xf2\x7d\xdc\x89\x46\x30\x5b\x6a\x65\x61\x88\xab\x65\x23\x9a\xa0\xee\x64\x9c\x8f\x0c\xb1\x9c\xa4\x03\x04\x6d\x15\x2b\x3e\x01\x20\x18\x21\x12\x9d\x8e\xba\x00\xd4\xed\xc9\x41\x9a\x70\xfe\xae\x4c\xbe\x59\x4c\x8a\x36\x03\x99\x82\xb1\xa3\xa6\x3f\x5c\xfd\xcd\x18\xdf\x92\xb0\x65\x91\xd3\x39\xfe\x4b\x85\xa3\xf2\xec\x5b\xc7\x65\xd3\x38\x3a\x03\x3f\x6b\x1e\xad\x37\xe9\xfc\x74\x2a\xd4\x43\x1a\x57\xd1\x3a\x5a\x4e\x1b\x75\x13\x7a\xdd\x2c\x9e\x23\x25\xf7\x10\xad\xd9\xc8\xdd\xc5\x3d\x55\x30\x1d\xeb\xaa\x15\xbc\xbb\x3f\xfd\xb0\x93\xd4\x7c\x39\x22\x5b\xaa\x7a\x52\x9a\xa7\x31\xbb\x7d\xd6\x7b\x7e\x1f\x74\x7a\x1c\x11\xfc\x63\x72\xc7\xc4\xd6\x27\xe1\xff\xcc\x6c\xbd\xc3\x97\x50\xdb\x55\x4a\xff\x32\x26\xd7\xef\xfe\x8f\x4d\x9c\x6d\x1d\x9d\xbc\xfe\xc9\x5d\x88\x9b\xe7\x00\xbe\x76\x7f\xcf\x3b\x59\xd3\x64\xd7\xed\x83\xb7\x72\x54\xc9\x7a\x3a\x61\xb5\x3f\xaf\xf1\x5a\x50\x69\x1c\x32\xde\xcf\xdc\xa9\xbd\x8d\x6a\xd7\xee\x9e\x62\x25\xbe\x9e\xdc\xad\x42\x0d\x05\x8d\x2e\x0a\x1e\xea\xae\x88\xa7\xcf\xb9\xc5\x0f\x68\x0a\xef\x76\xa1\x56\x6d\x13\xcd\x53\x5b\x73\xf3\xb4\x51\xd4\x62\xd1\x5c\x06\xcd\xa2\x7b\xdd\xf8\xeb\x36\xd3\x87\x8f\x80\x32\x2f\x08\xd5\x5f\x59\xf0\x04\x0a\xcf\x99\x09\x7f\x57\xad\x0e\x14\x90\x20\xa4\xdf\xe0\x91\x94\x08\x33\x9c\x24\x90\x0f\x53\x6d\x41\x24\x95\x31\xf4\xff\x56\x1a\xea\x90\xc3\x46\x36\x36\xa6\x0f\x63\x02\xcf\xe6\x30\x82\x86\x27\x43\x5c\xe2\xb1\x80\xf0\x3c\x08\xa7\x84\xce\x45\xaa\x0f\x14\x13\x9a\x1e\x7a\x16\xa3\x99\xd8\x7a\x90\xc9\xf7\x9d\xd1\x95\x4a\xdf\x24\xba\xd0\x66\x1d\x14\xf9\x2e\xa3\x59\x00\xa0\x2b\xb9\x93\xcf\x9e\xbb\x1e\x5c\xa1\x77\xd4\x8d\x28\x9b\x1b\x97\x08\x22\xae\x9a\x1a\x6a\xab\x73\xb5\xca\xe7\x86\xa6\xac\x26\xb8\x85\xcf\xce\x4d\x99\xf8\x42\x15\xc8\x37\x42\xc8\xc1\x84\xf3\x83\x93\x3b\x5d\x99\xf8\x93\x8b\xf3\xc5\x53\x93\xaa\x8a\x62\x66\xdb\x3c\x19\xf0\x59\x04\xe5\xed\x3c\x68\x4e\xcd\xf8\xb3\xe1\x01\xd5\xcb\xce\x43\x4c\xc8\xe1\xb8\xa1\xa7\xd7\x9b\x87\x6a\xe7\x11\x2f\xff\x01\xd0\x80\xfc\x53\x0d\x36\x39\xa9\x40\x7f\x6f\x49\x01\xd2\x7c\xab\x9b\xb6\xfd\x8f\xed\xf9\x55\xd5\x64\xd2\x65\x79\x86\xb1\xc1\x41\xec\x69\x6d\x96\xeb\x2f\x37\xf7\xbd\x42\x59\xfc\xc3\xe4\xe1\x60\x59\x1b\x4a\x3e\xaf\xdc\xb6\x93\x4c\xb3\xde\x06\xc0\x9d\x85\x07\x0f\xea\x1b\xff\x06\x00\x00\xff\xff\x66\x69\x24\xe6\x24\x0e\x00\x00")

func staticMainJsBytes() ([]byte, error) {
	return bindataRead(
		_staticMainJs,
		"static/main.js",
	)
}

func staticMainJs() (*asset, error) {
	bytes, err := staticMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.js", size: 3620, mode: os.FileMode(511), modTime: time.Unix(1462661349, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
	"static/main.css": staticMainCss,
	"static/main.js": staticMainJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
		"main.css": &bintree{staticMainCss, map[string]*bintree{}},
		"main.js": &bintree{staticMainJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

