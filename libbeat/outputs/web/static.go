// Code generated by go-bindata.
// sources:
// static/index.html
// static/main.css
// static/main.js
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x57\x51\x8f\xe3\x34\x10\x7e\xe7\x57\x58\x16\x48\x20\xd1\xa4\x7b\x5a\x84\x28\x6d\x1e\xb8\x13\x02\x01\x0f\x70\xf7\x86\xd0\xca\x4d\xa6\xb5\x6f\x9d\xd8\x6b\x4f\xbb\x2a\xcb\xfe\x77\xc6\x4e\xb2\x49\xdb\x74\xcf\x7b\x20\xf1\x42\x1f\x9a\xda\xf9\xbe\xcf\x93\x99\xcf\xe3\x66\x29\xb1\xd6\xac\xd9\xce\x84\xb5\x2b\xde\x00\x6e\x9d\xb0\x92\x87\x99\xd2\x34\xe8\x8c\xd6\xe0\x56\xfc\x07\x44\xfb\xb3\xf2\xf8\x1a\x9d\xe6\xc5\x27\x8c\x3e\x4b\x09\xa2\x6a\x7f\xc6\x21\x2a\xd4\x50\xfc\xfe\xf0\xe0\xe0\xce\x67\x1a\x9a\x2d\xca\xc7\xc7\x3f\x98\x15\xe5\x2d\xe0\x1a\x04\xb2\x7b\x58\x33\xb3\x43\xbb\xc3\x65\xde\xc2\x07\xba\x2f\x9d\xb2\xc8\xbc\x2b\x57\x5c\xd2\x6a\x8b\x3c\x2f\xab\x26\x5b\x1b\x83\xa5\xf7\x59\x69\xea\xfc\xfd\xdd\x0e\xdc\x21\xbf\xca\xbe\xc9\xae\xba\x41\x56\xab\x26\x7b\xef\x79\xb1\xcc\x5b\x81\x97\x29\xfa\x46\xd8\xcc\xef\xb7\xf9\x3c\xbb\x26\xcd\x7e\x38\xfb\x67\xaa\xa2\xd9\xee\xb4\x70\xa4\x40\xb1\x5e\x67\xd7\x4f\x13\xff\x8a\xec\x8c\xb2\xe8\x4d\xc8\x29\xa9\xcf\xb3\xf9\xf9\x7c\xea\x3a\x79\x2d\x2e\x03\xb5\x6a\x6e\x99\x74\xb0\xe9\x71\x14\x06\x67\x0e\xf4\x8a\x7b\x3c\x68\xf0\x12\x00\x7b\x2b\xe4\x83\x17\x96\x6b\x53\x1d\x46\x3a\xf2\x55\x31\x38\x80\x80\xaf\x86\x7b\xef\x0e\x16\x16\xa3\xd0\x40\x43\x89\xc1\x79\xb5\xa9\xc2\x3a\xd6\x19\x34\x3e\xa0\xf8\x40\x8a\x50\x63\x51\x99\x86\xed\x85\xde\xc1\x8a\xf3\x42\x68\xbd\xcc\xdb\xc9\x67\x91\x21\xb3\xbc\x08\xdf\x49\xf0\x1a\xea\x52\x94\x92\x96\xef\x7f\x25\xd1\x1c\x54\x8a\x92\x1a\x2f\x69\xeb\x1c\xfc\x1d\x6d\xab\x78\x49\x22\xa0\x74\x6a\x43\xd9\x6f\xaf\xe7\x14\xaa\x67\x4c\xe6\x30\xf3\xbd\xd2\x08\x6e\x94\x6d\xd5\xd0\x36\x1c\x27\x5b\x20\x01\x9a\x51\xa6\x97\x95\xda\xb3\x52\x0b\xef\xc3\x23\xd1\x76\xf3\xe8\x4f\x0b\x81\x62\xad\x81\xdd\xab\x0a\xe5\x8a\x5f\xcd\xe7\x9f\x9d\x00\x5a\xd0\x71\xa7\x38\xbe\xe7\x2e\xdd\x90\xbd\xec\x57\x24\x1a\x4c\x40\x3d\x43\x7e\x10\x7c\x15\x42\x78\xa7\xea\x17\xa0\x5f\x6b\x05\x0d\xfe\x68\xd3\x19\x6f\xc1\xed\xc1\x25\x32\x42\xf8\x6f\x51\xe0\xce\x27\xc3\x7f\x01\x94\xa6\x4a\x82\x5f\x87\x78\x7e\x0d\xad\x30\x3d\x18\xf5\x67\x5a\x76\x02\xf8\xcd\xce\x89\xe0\xad\x67\x08\xf9\x54\x0d\x03\x7e\xb2\xea\x54\xf1\xe0\x3a\x07\x96\xfa\x41\x34\x16\x53\x0d\x0b\x67\x06\xfb\x2b\x5c\x3a\xa3\x0e\x7b\x7f\xd1\x3b\x33\x9e\x49\x5a\x95\xb7\xd4\x81\xa4\xb9\x7f\x03\x28\x94\xfe\xfc\x53\xd8\x53\xf5\xbe\x0c\xd4\x2f\x26\xcc\xd7\x2e\x59\x15\x0f\x0f\x01\x91\x21\x09\xb2\xc7\x47\x8a\xee\xa2\x21\x07\x2c\xb9\xc8\xa3\xa8\x6d\x2a\xa1\x8c\x46\xba\x51\x81\xb0\x38\x9e\xb3\xc6\x61\xaa\xcc\x11\xff\x25\x44\x1f\x5d\x96\x8a\xae\xa3\xc9\x52\xd1\xf1\xb4\x4d\x05\xaf\x0f\x08\xfe\x86\x4e\xfa\x9c\x5a\xc2\x9c\x58\x3f\x7d\x97\xc4\x73\xe0\xad\x69\x3c\x84\xcc\x13\xab\xf6\xd3\xac\x73\xc7\xd1\x4c\x68\x44\xe3\x06\x48\xcd\xeb\xa4\x95\xa9\x6a\xc5\xab\x68\x1a\xce\xe2\x11\xb6\xe2\xd1\xe8\x8b\x89\xbe\xf5\x44\xe8\x1a\xdf\xac\x27\x76\xfd\x30\x1c\x21\xb3\x13\xb1\x8d\x36\x02\x17\x4c\xc3\x06\xbf\x9d\x6a\x83\xa7\x92\x1b\xe5\xe8\x9b\xce\x59\x78\x92\x1d\x4d\x4d\x27\xab\xe3\x4e\xa4\xe4\xe8\x79\x2f\xae\x19\xf6\xe4\xf0\x10\x61\x70\xa9\x28\x09\x8d\x7d\x00\x1f\x6d\x69\x19\x36\x74\x7b\xfe\x40\xf5\x1b\x95\x35\x24\x2b\xeb\x22\xb8\x09\x8b\x82\x3b\x3d\x48\xce\x25\xa3\x29\x64\xd6\x88\xfa\xf9\x0d\x3b\x62\xf4\xe1\x7e\x1d\xa2\x5d\xda\xfe\x31\xd7\x0e\xc4\xed\x8c\xfe\x22\xf0\x56\x32\x9e\xa1\x51\xd3\x16\xcf\xeb\x4e\xb7\xb6\xee\xce\xb1\xe1\x86\x1b\xd3\x85\xb0\x0e\x8e\x0a\x11\xfe\x25\x3d\x15\x22\x0e\x42\x70\xe3\xac\x75\xc8\x36\x50\x07\xa7\x86\x3f\x5b\x66\x54\xeb\x76\x17\xbd\xc0\xb3\x4e\x6d\xe5\x87\x4c\xdb\x89\x7e\x9c\x6b\x5b\xf2\x47\xd8\xb6\x5b\xf5\xbf\xf4\x6d\x1b\xc2\xff\xc6\xed\x4a\x91\xe2\xdc\x16\x9a\x64\xdd\xd1\x70\x99\xb7\xef\x0e\xf4\x96\x40\x2f\xa5\xc5\xdf\x01\x00\x00\xff\xff\x29\x11\x75\x55\x9b\x0e\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 3739, mode: os.FileMode(511), modTime: time.Unix(1461493871, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMainCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x53\xc1\x8e\xd3\x30\x10\xbd\xe7\x2b\x2c\x21\xb4\x20\xad\xab\x2e\x62\x0f\xa4\x47\xee\xfc\x83\x93\x19\xd7\xa3\x4e\x3d\xc6\x9e\x6c\x5a\x21\xfe\x1d\x27\x4d\x28\xcb\xaa\x15\xe4\x12\x65\xc6\xef\xbd\x79\xcf\x93\x4d\xc6\xef\x03\x16\x2d\xe6\x47\x63\xea\x13\x90\xf6\x41\x5b\xf3\x79\xbb\x4d\xa7\xdd\x5c\x92\x17\xcc\x9e\x65\x6c\x4d\xe9\xb3\x30\xef\x9a\x9f\xcd\x26\xa8\x26\x0b\xa8\x8e\x78\x41\x8e\x04\x1a\x2a\xf0\xcb\xfb\xdd\x2b\xa6\x4f\xcf\xbf\x99\x3a\xc9\x80\xb9\x35\x4f\xe9\x64\x8a\x30\xc1\x2d\x81\xa9\x0a\x54\x12\xbb\x73\x6b\x3a\x96\xfe\x70\xa9\x79\x89\x6a\xbd\x3b\x12\xd7\xfa\xc3\x57\x19\x32\x61\x36\xdf\x70\x7c\x78\x34\xcb\xd7\xa3\x39\x4a\x94\x92\x5c\x8f\xd3\xa0\xea\x3a\xc6\x65\xc2\x8b\xbc\x55\x49\x6f\x46\x58\x5a\x9d\xa8\xca\xf1\x4d\xf7\x7f\x65\x27\xcc\x2c\x6c\xab\x01\x19\x6a\x08\x9e\x4e\x08\x73\x70\x9d\xc0\xf9\x75\x62\x4f\xdb\xed\x12\xd9\x58\xa7\xb0\x5d\x46\x77\xa8\xae\xa7\x97\x75\x6b\x1a\xc9\x01\x50\xdc\x5b\x46\x5f\xe9\x9e\xd7\x44\xd7\x72\xbe\x64\x3d\xd7\x27\x91\x15\xbc\x2a\xdd\x26\xbe\x86\xef\x06\x95\x0a\x6e\xae\x2b\xa1\xb0\xe2\x03\x29\xda\xd9\x5d\x6b\xa2\x8c\xd9\xa5\xbf\xd1\x81\x00\x30\x2e\xde\xf1\xa4\xf6\xda\x42\x66\x4a\x85\xca\xf5\x3e\x34\x2c\xc4\xf3\x49\xc7\xb4\x8f\xad\x99\xac\xfd\x71\x24\xb7\x51\x83\xed\x03\x31\x7c\xc0\x17\x8c\x1f\xd7\x5b\x74\xfd\x61\x9f\x65\x88\x60\x7b\x61\xa9\xeb\xf4\x0e\x11\x6f\x00\x05\xe0\x0e\xce\x7b\x7f\x07\xd7\x86\xc9\xc2\x4d\xf4\xb9\xda\x92\xf1\xde\xc0\xff\x4c\xd0\x6c\x3c\xe5\xa2\x96\x29\xae\xbb\x3a\xaf\xdc\xb8\xfc\x42\x9d\xf0\xbc\x3c\xbf\x02\x00\x00\xff\xff\x98\x0d\xa5\x79\xad\x03\x00\x00")

func staticMainCssBytes() ([]byte, error) {
	return bindataRead(
		_staticMainCss,
		"static/main.css",
	)
}

func staticMainCss() (*asset, error) {
	bytes, err := staticMainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.css", size: 941, mode: os.FileMode(511), modTime: time.Unix(1460837426, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMainJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x57\x5b\x6f\xdb\x36\x14\x7e\xf7\xaf\x60\x84\xa0\x92\xe1\x94\x49\x5f\xed\x06\xd8\xd0\xa2\x08\x86\xa6\x05\x96\x6c\x2f\x59\x30\x30\xd2\xb1\x25\x54\x26\x15\x92\x8a\x67\x04\xfe\xef\x3b\xbc\xe9\x42\xa9\x43\x9e\xa7\x87\x58\x3a\xfc\xce\x85\x1f\xf9\x1d\x32\x8c\xef\xda\x9a\x49\xba\x17\x45\x5b\x43\x96\xf2\xdd\x97\xaa\xd6\x20\xd3\x0b\xf2\xf0\xb8\xa4\x5b\xfb\x91\xa5\x12\x9e\x3b\xfb\xb6\xe5\xb9\xae\x04\xcf\x96\xe4\x75\x41\xf0\x91\xa0\x5b\xc9\x7b\x7b\xa5\x61\xaf\x2e\x48\x23\x85\x16\xea\xfe\xd8\x00\xbe\x33\x8d\xce\x3c\x78\x98\xe7\x85\x49\xf4\x54\x6d\xad\xc9\x35\xe6\xda\x74\x03\xd5\x96\x64\x67\xbd\x33\x79\xf7\x8e\x9c\x05\xff\x0e\x34\xc8\x6b\xd3\x6d\x16\xdd\x50\xa8\x83\xec\x40\xdf\x32\x9d\x97\x5f\xe2\x82\xa3\x00\xa3\xc2\x63\x4c\xa8\x68\x5c\x90\x41\x52\x6d\x3e\xce\xae\x07\x13\x9d\x73\x1e\x26\x62\xb5\x82\xcd\x04\x71\x5a\xcc\x64\xcc\x02\x67\x5d\xba\xe7\x16\xe4\x91\x6a\xf1\x55\x1c\x40\x7e\x62\x0a\xb2\x25\xad\x78\x01\xff\x7c\xdf\x66\x1e\x3b\x1e\x5d\x92\x8f\xe4\xea\x2d\x25\xbd\xa5\x22\x8f\xd7\xb2\x8d\x66\x70\xea\x3f\x07\xaf\x66\x75\xf7\x81\x7c\x5c\xe0\xe9\x5a\xf4\xd8\xad\x90\x24\x33\x0e\x15\x02\xaf\x36\xf8\xf3\xd1\x2d\x2a\xad\x81\xef\x74\x89\x96\xd5\x2a\x9e\x87\xc5\x23\x08\x5d\x2c\xf6\xa1\x7a\x1c\xd7\x65\x16\xad\xab\xc0\x2d\xed\x1c\x17\x6e\x0b\xd2\xa6\x55\xa5\x03\x45\xb3\x5b\x4c\xdf\x3c\x15\xce\xd3\xc1\x71\xe6\x27\xf4\x34\x45\xb1\xa6\xc1\x9a\x26\xba\x02\xbd\x93\xac\x29\x8d\xae\x52\x3f\xf8\xfe\x00\x4f\x4a\xe4\x3f\x40\xa3\xb5\x57\xde\xe3\x72\x81\x31\xe8\x96\xe5\x5a\xc8\xa3\x75\x2d\x98\x66\x43\xe5\x9d\x77\x9e\x61\x4a\x26\xb3\x41\xdd\x69\x09\xcc\x90\xd2\x43\xb2\xe4\xa0\xd6\x97\x97\x09\x59\x91\x5a\xe4\xcc\x04\xa0\xa5\x50\x1a\xbf\x93\x4b\xe3\x93\xf8\x39\x9b\x18\xca\xfa\x2b\x0c\xf0\x7a\xea\xad\x28\x7f\x35\x50\x69\x9f\x88\x0a\x7e\x0b\x4a\xb1\x1d\x64\x5d\x71\x7b\x67\x88\xb5\x0e\x18\xe0\xb7\xbb\xef\xdf\x68\xc3\x24\xee\x4e\x8f\xa2\x26\xd6\x32\x12\xff\x44\x47\x8e\xf1\xc1\x46\x5b\x8c\x42\x17\x18\x9a\xc3\x81\x7c\x66\x1a\x32\x78\x48\x7f\xd1\x15\x86\xd7\x6c\xdf\x20\x99\xbd\x17\xd0\xce\x8e\x0e\x59\x41\xcd\xa6\x14\x5c\x97\xd9\x72\xf5\x61\x69\xe9\x30\x24\x59\xbb\x0d\x65\x6d\xa4\xb3\xdd\x88\x56\x2a\x67\x5c\x77\xc6\xdb\x8a\xb7\x1a\xd0\xbc\x42\xe3\xca\x9a\xee\x20\x17\xbc\x50\xd9\x28\x35\x52\xd8\x62\x6e\xb3\x32\x54\xcb\x6a\x9f\x75\xa6\x08\xa6\x1a\xc1\x15\x8c\x71\xce\x16\xd1\x04\xae\x01\x5d\x5f\x93\xb4\xd4\xba\x49\x63\xd2\x80\xe2\x54\x75\x6b\x16\x0e\xa8\x41\xd0\x5c\x14\x91\x78\xc1\x75\x15\x0b\xf1\xe5\xfc\xdd\xca\x6a\xb3\x98\x68\xad\x04\x56\x80\x54\x51\xaf\x1e\x8f\xfe\x2a\xe5\x30\x12\x55\x4d\x5d\xe1\xf6\xfb\x8b\x27\x91\xaa\x7a\xc5\x5f\x7b\xbd\x77\x01\xfe\x4b\xf3\x21\x1b\xb3\x79\x3a\x17\x94\xbe\x4f\x95\xae\xd3\xe5\xb4\xbf\xfa\xd2\x9d\xc6\x5f\x53\xce\xf6\x90\xae\x4d\x90\x87\xab\x47\x14\xde\x0b\xab\xdb\x60\xf8\xf0\x78\xfa\x69\x03\x70\x7c\x59\x22\x03\x55\x3d\x29\xfe\x2d\x66\xb7\x5f\xf5\x9e\xdf\x27\x51\x1c\x23\x82\x7f\x4e\x6e\x4c\xac\xdb\x09\xff\x67\x66\xdd\x0c\xdf\x42\x6d\xa7\x94\xfe\x23\x26\x77\xd8\xb4\x9f\x7d\x9d\x41\x47\xa7\x41\xdb\x33\x5d\xc8\xf4\xbc\x11\x7c\x6d\xff\x5e\x74\x36\xdf\x1b\xd7\xe1\x65\x30\x72\xe4\xf9\x7a\x7a\x31\x0a\xcf\xa0\x5f\x2a\xe0\x45\x96\x18\xfc\x70\xe5\x4e\xe1\x10\x71\xa9\xed\xf1\x62\x9c\xcc\xa9\x62\x0f\x03\x6c\x28\x5a\x8a\xba\x36\x77\xb1\x1b\xe4\xe9\x6b\xa5\xf4\x27\x2d\xeb\xc1\xa1\x40\xb2\x73\x95\x0b\x73\xd9\xf2\x07\x46\xa8\xc2\x99\xa9\xef\xe1\x7e\xd0\x7e\x6e\x86\xe3\xaa\x14\x87\xcf\xa0\x59\x55\x23\xaa\x3f\x69\xe0\x05\xb8\xbe\x30\x4c\x0c\x67\x15\x7c\xa0\x86\x5c\x43\xf1\x3b\x3c\xa3\x13\x62\xc6\x17\x00\x6d\x36\x93\x8b\x40\xf3\x56\x4a\xfc\xbd\x67\x12\x3b\xe4\xb8\x91\xc5\xc1\xc4\x21\x26\xf0\x7c\x0e\x43\xf1\xce\x23\x91\x4b\x7d\xac\x21\xb9\x20\xc9\x94\xd0\xb9\x4a\xc5\x01\x6b\xd2\xb2\x87\x9e\x67\x5a\x4e\x62\x3d\xb1\xfc\xc7\x4e\x8a\x96\x17\xef\x73\x51\x0b\xb9\x26\x75\xb5\x2b\xf1\x08\x07\xe8\x24\x77\x1a\xb2\x67\x8f\x07\x2b\xf4\x8e\xba\x88\xb2\xb9\x5b\x0e\x42\xe8\x8d\xd7\x50\x50\xe7\x6a\x55\xcd\xdd\x75\x4a\x47\x70\x80\xcf\x5e\x77\x4a\xfa\x0d\x15\x68\x4e\x84\xc4\x14\x93\xcc\xdf\x77\xec\xee\x2a\xe9\x9f\x46\x9c\x6f\xbe\xec\xf0\xb6\xae\x67\xa6\x3d\xa6\xb5\x07\xf9\x61\xf7\xef\x83\xbd\x34\x63\x4d\x7f\xc8\x2a\x19\x0d\x0b\x89\x53\x31\x23\xf7\xe1\x5c\xf6\xe3\x61\x93\x1a\x9d\x98\x63\x14\x55\xf0\x6f\x00\x00\x00\xff\xff\x8f\xa0\x2f\x27\xa9\x0c\x00\x00")

func staticMainJsBytes() ([]byte, error) {
	return bindataRead(
		_staticMainJs,
		"static/main.js",
	)
}

func staticMainJs() (*asset, error) {
	bytes, err := staticMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.js", size: 3241, mode: os.FileMode(511), modTime: time.Unix(1461493700, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
	"static/main.css": staticMainCss,
	"static/main.js": staticMainJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
		"main.css": &bintree{staticMainCss, map[string]*bintree{}},
		"main.js": &bintree{staticMainJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

