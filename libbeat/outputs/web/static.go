// Code generated by go-bindata.
// sources:
// static/index.html
// static/main.css
// static/main.js
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x57\x4d\x6f\xdc\x36\x13\xbe\xbf\xbf\x82\x20\x5e\x03\x29\xd0\x95\xd6\x89\x8b\xb4\xdb\x95\x0e\x89\x51\xf8\xd0\xf6\x60\xa7\xb9\x04\x41\x41\x49\xe3\x95\xb2\x94\x28\x93\x5c\xbb\x8b\x8d\xfe\x7b\x87\xd4\xe7\x6a\x25\x9b\x76\x03\xf4\xd2\x3d\x48\x22\x39\xf3\xcc\x70\xe6\x99\x21\x77\x9d\xea\x9c\x93\x62\xb3\x60\x65\x19\xd0\x02\xf4\x46\xb2\x32\xa5\x66\x26\x16\x85\x96\x82\x73\x90\x01\xbd\xd2\xba\xfc\x35\x53\xfa\xbd\x96\x9c\x86\xff\x23\xf8\x5b\xa7\xc0\x92\xfa\xd3\x0e\x75\xa6\x39\x84\x9f\x0e\x07\x09\x77\xca\xe3\x50\x6c\x74\x5a\x55\x9f\x49\xc9\xe2\x2d\xe8\x08\x98\x26\x0f\x10\x11\xb1\xd3\xe5\x4e\xaf\xfd\x5a\xbc\x57\x57\xb1\xcc\x4a\x4d\x94\x8c\x03\x9a\xa2\xb5\x95\xef\xc7\x49\xe1\x45\x42\xe8\x58\x29\x2f\x16\xb9\xff\xe5\x6e\x07\x72\xef\x9f\x7b\x3f\x79\xe7\xcd\xc0\xcb\xb3\xc2\xfb\xa2\x68\xb8\xf6\x6b\x80\xe7\x21\xaa\x82\x95\x9e\xba\xdf\xf8\x4b\xef\x02\x31\xdb\xe1\xe2\x9f\xa1\xb2\x62\xb3\xe3\x4c\x22\x02\xfa\x7a\xe1\x5d\x74\x13\xdf\x04\x76\x81\x51\x54\xc2\xc4\x14\xd1\x97\xde\xf2\x74\xde\xd5\x8e\x9f\xb3\x79\x41\x9e\x15\x5b\x92\x4a\xb8\x6d\xe5\xd0\x0d\x4a\x24\xf0\x80\x2a\xbd\xe7\xa0\x52\x00\xdd\x52\xc1\xef\xb9\xb0\x8e\x44\xb2\x1f\xe0\xa4\xaf\xc3\x9e\x01\x28\xf8\xba\x5f\xfb\x25\xe3\x1a\xe4\x6a\xe0\x1c\x70\x88\xb5\xe1\x5e\x2e\x12\x63\xe9\xd6\x4a\x7c\xd8\x97\x40\x7b\x35\x2b\x2a\x4a\x9d\x89\x82\xdc\x33\xbe\x83\x80\xfe\x21\x33\x1a\xe2\x63\xed\xd7\xf3\x8f\x0a\xbf\x17\x62\x9b\x21\x60\xfd\x76\x54\x49\xac\x42\xe2\x26\x7e\x0d\x48\x4e\xa5\xaf\x30\x28\x20\x69\xd8\x0c\x49\x3d\x76\x44\x50\xa5\x28\x14\xf4\x10\xf5\xf8\x79\x18\xd6\xec\x3b\xcc\x47\xef\x83\x19\x3d\xcb\x83\x56\xbd\xb1\x3f\xad\x8f\xfc\xb1\xa9\x1b\xcc\x64\x05\x96\xf9\x20\x95\x25\xd3\x98\xca\x62\x90\xc7\x1b\x21\x35\x24\x24\xda\x3f\xc6\x00\x21\xed\xfe\x1f\xf3\xf4\x43\x96\xe3\xce\x58\x5e\xd2\xd0\x7c\x3a\xed\xee\x4a\x28\x24\xaf\x79\x3a\x89\x5f\xee\x24\x33\x63\x1a\xb6\x5f\x4e\x6a\x37\x5a\x02\xcb\x6f\xe0\x8e\x86\xf5\xa7\x93\xd6\x3c\x99\x4f\xc3\x7c\x0d\xf7\x20\x15\x34\xd1\xd6\x58\x28\x01\x8d\x53\x88\xb7\x91\xf8\x8b\x0e\xc2\x28\x6b\x39\xea\x0f\xc0\x92\xec\x9e\xc4\x9c\x29\x65\x96\x2d\x3b\xd4\x38\xd0\x9a\x45\x1c\xc8\x43\x96\xe8\x34\xa0\xe7\xcb\xe5\xd9\x48\xa0\x16\x3a\x3e\x08\x8e\xd7\xe4\xdc\x42\xda\xc2\xfe\x70\xd6\xe6\x4d\xa7\x4f\x0a\xbf\x3d\x1b\xa6\xc0\x41\xc1\xa0\xb7\xb1\x77\x10\x3f\x37\xf2\x97\xc2\x34\x3c\x67\xf8\xdf\x40\xa7\x22\x71\x13\xff\xf1\xac\x49\xad\x23\x76\xdd\x72\x66\x85\xfd\xa9\xf8\x1a\xf9\xc9\x8c\x60\x36\x0c\x25\x24\x94\xd8\x8a\x6d\xd2\x49\x56\x10\x73\x5c\x93\xaf\xe6\xd5\xf4\xe3\xbe\xe9\xae\x9a\xa2\xc5\x65\x5b\x87\xef\xf6\x2b\xfb\x5e\xb5\x74\xb2\xd7\x04\x9e\xc5\x5b\x3c\x14\x52\xf1\x70\x09\x9a\x65\xfc\xd5\xff\x71\xb5\xd0\xdf\x1b\xc8\xef\x26\x08\x53\xbb\x92\x84\x87\x83\x91\xf0\xba\xf2\x25\x0b\xeb\xcb\xa7\xe5\xe7\xc1\xdc\x57\x52\xec\xf2\x08\x4d\xbe\x21\x55\x85\x3b\x9b\x25\x5a\x87\xd7\xd2\x63\xa0\xea\xa8\xd9\x95\xab\xab\x29\xd3\x3f\x5c\x65\x6b\x96\x3c\x29\xbd\x66\xcd\xa1\xdb\x5c\x02\x0e\x87\x0d\x68\x63\xe7\x95\x89\x66\x55\xd9\xeb\x95\x87\x14\xaa\x2a\x4a\x34\x93\xb8\x1a\xd0\x3f\x23\xce\x8a\x2d\x6d\x4d\xe1\xaa\xb5\xc3\x42\x27\xcf\xda\xde\xee\x19\xb2\xcd\x3a\x78\xca\x35\x9c\x31\xed\x61\xd8\x9e\xb0\xa5\x8c\x1a\x4c\x96\x04\x34\xb1\xb4\xa0\xc4\xde\x1b\x02\x6a\xe9\xbd\x9a\xe8\x26\x9d\x42\xd3\x8e\x16\xad\x62\xd3\xa5\x4c\x48\x16\x23\xb0\x5b\x2e\x98\x5e\x11\x0e\xb7\xfa\xe7\xa9\xe6\x34\x86\xbc\xcd\x24\x3e\xf1\x72\x03\x1d\xec\x60\x6a\x3a\x56\x18\xa7\xba\xef\x42\x72\x3d\xcc\xe4\x78\xa1\x8e\xfb\x78\xf6\x23\x56\x8a\xa1\x63\x55\x4d\xc4\xf4\x28\x60\xb3\x4e\x9b\x72\xee\xa3\x60\x06\x73\x49\x75\xe8\xd7\xbd\xf0\x51\x37\x48\x4d\x2f\x18\xfa\x5d\xdf\x34\xc6\x47\xc2\x29\x4a\xd2\xda\x7b\x63\xcc\xe1\xe6\x53\xef\x77\x96\xcf\x13\x69\x46\xfb\xad\xd1\x5e\x97\xed\x2e\x23\x2c\xc5\xed\x82\x71\xde\x40\x7e\x34\x67\xa3\xc5\x2c\x1f\x61\x75\x1d\xd4\xd9\x43\x67\x4c\xd8\x7e\x61\x3a\x0f\xe5\x51\x16\xcc\xc5\xb6\xcb\x82\x1d\x38\xd1\xc5\xdc\x98\xa6\x93\x5f\x8e\xeb\xe9\xc4\x8b\x01\x13\xea\x1a\x7d\x46\x49\xc8\x6c\x93\x3e\x55\x13\x0d\xe8\x37\x28\x8a\xae\x89\xf4\x74\x9f\x15\x69\xfa\xcc\xec\xfa\x35\x30\xf5\xd2\x82\x69\x76\xf4\xaf\x54\x4c\xb7\x81\xff\x4a\xa7\x2b\x9d\x26\x1f\x2f\xac\x9d\x2e\xa2\x2f\x2d\xa2\xc1\x70\xed\xd7\xff\x4c\xf1\x3f\xa8\xce\x79\xf8\x77\x00\x00\x00\xff\xff\x99\xaf\xae\xaa\xf9\x10\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 4345, mode: os.FileMode(511), modTime: time.Unix(1460305751, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMainCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\xc1\x6e\xe2\x30\x10\x86\xef\x79\x0a\x4b\xab\x15\xbb\x12\x46\x61\xb5\x3d\x34\x1c\x7b\xef\x3b\x38\xf1\x18\x5b\x18\x8f\x6b\x4f\x48\x50\xd5\x77\xaf\x13\x1c\x68\x4a\x41\x2d\x17\xe4\x99\x7c\x33\xff\xfc\x33\xab\x00\x2f\x2d\x44\x8a\xec\xb5\x60\xe9\xa7\xc1\x6c\x35\x55\xec\x7f\x59\xfa\x7e\x33\x86\xf0\x00\x41\x59\xec\x2a\x16\x9b\x80\xd6\x6e\x8a\xb7\x62\xa5\x89\x3c\x97\x40\xc2\xd8\x4c\x76\x46\x92\x4e\xe0\xe3\xef\xcd\xac\xd2\xbf\x87\x73\xa5\x1a\x83\x84\x50\xb1\xb5\xef\x59\x44\x6b\xe4\xad\x06\x43\x54\x9a\xe8\xad\x38\x56\xac\xb6\xd8\xec\x4e\x31\x85\x8e\xb8\x12\x7b\x63\x53\x7c\xf1\x84\x6d\x30\x10\xd8\x33\x74\x8b\x25\xcb\xaf\x25\xdb\xa3\xc3\xe8\x45\x03\x83\x50\x12\xb5\x85\xac\xf0\xd4\x9e\x13\xfa\x2b\x09\x39\x55\x23\x11\xee\xaf\xb2\x3f\x6d\x3b\x30\x63\x63\x9e\x06\xc0\x36\x99\xa0\x4c\x0f\x72\x34\xae\x46\x79\x9c\x3b\xb6\x2e\xcb\x6c\x59\x97\x54\xf0\x3a\x80\xd8\xa5\xa9\x87\x3f\x2e\xb2\xdd\xe7\xd7\x84\x7e\xfd\xe5\xdc\x4d\xd1\x12\x26\xb8\xb8\xec\x98\xe4\xc4\x6b\x43\xc0\x47\xb9\x15\x73\xd8\x05\xe1\x3f\xd3\xda\x48\x09\x2e\x0f\x03\x3d\xf1\x4b\x0a\xac\x35\x3e\x9a\x38\x48\xcb\x0e\x53\xa8\x1c\x69\xde\x68\x63\xe5\x1f\x38\x80\xfb\x3b\x99\x2e\x9a\xdd\x36\x60\xeb\x24\x6f\xd0\x62\xda\xfe\x2f\x80\x0f\xab\x99\x81\x28\xe5\x1d\x4e\x29\x75\x87\xab\xf4\x20\xf0\x26\x7d\x4c\xa2\xb1\xbb\xc1\x8f\x82\xbf\x5d\xa0\x58\x29\x13\x22\x71\x6b\xdc\x74\x5a\xe3\x85\x74\xf9\xe2\x6b\xb4\xe3\xae\xdf\x03\x00\x00\xff\xff\xba\xe4\x51\x3b\x5c\x03\x00\x00")

func staticMainCssBytes() ([]byte, error) {
	return bindataRead(
		_staticMainCss,
		"static/main.css",
	)
}

func staticMainCss() (*asset, error) {
	bytes, err := staticMainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.css", size: 860, mode: os.FileMode(511), modTime: time.Unix(1453812976, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMainJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x51\x73\xdb\x36\x0c\x7e\xcf\xaf\x60\xb5\xdc\x59\xbe\x24\x4a\xfb\x6a\x2f\x7b\x58\xbb\x5e\xb6\x5b\xdb\xbb\x26\xdb\x4b\x96\x07\x46\x82\x6d\x5d\x68\x52\x21\xa9\x7a\xb9\xd6\xff\x7d\x80\x24\x4a\x94\x44\xa5\xe9\x25\xdd\xed\x61\x7a\x48\x2c\x12\x00\x81\x0f\xc0\x47\xd8\x5c\xae\x4b\xc1\x75\xb2\x55\x59\x29\x20\x9e\xc9\xf5\xdb\x5c\x58\xd0\xb3\x63\x76\x75\x3d\x4f\x56\xd5\x4b\x3c\xd3\x70\xd7\xae\xaf\x4a\x99\xda\x5c\xc9\x78\xce\x3e\x1f\x30\x7c\x34\xd8\x52\xcb\x6e\x3d\xb7\xb0\x35\x28\x57\x29\x5c\xde\x17\x70\xcc\x0a\x6e\xf1\xb3\x74\x1a\xf4\x7c\xe2\x1a\x35\x4d\x29\x2c\x3b\xc3\xb3\x96\xed\x46\xbe\x62\xf1\x8b\x4e\x99\x7d\xf9\xc2\x5e\x38\xfd\x56\xc8\x3b\xb7\x3a\x6e\x79\xd0\x6e\x39\x3f\xd8\x1a\xec\x3b\x6e\xd3\xcd\xdb\xa1\xc3\xfe\x49\xde\x41\x67\x67\x2c\xfa\x43\xe7\xd1\x50\x6c\x2a\xc6\x90\xdc\xc0\xaf\x04\xed\x25\xb9\xcc\xe0\xef\x0f\xab\xb8\x05\xe1\xc5\x19\x3b\x79\xb5\x1c\xe9\xee\xfb\x4b\x7b\x06\xc2\x40\xc8\xc9\x8f\x70\x57\x82\xb1\xe7\xc0\x33\xd0\x4f\x76\x77\xa5\x34\x8b\x29\x1b\x39\x26\xe2\xe5\x12\xff\xfd\x58\xfb\x5e\xdb\x37\x89\x00\xb9\xb6\x9b\x25\x3b\x3a\xca\xa7\x6c\xd0\x43\x26\x36\x68\xc2\xd7\xbd\xca\xaf\x27\xe5\x29\xb0\x4d\xf2\x9e\x6f\x61\x02\xa1\xf9\xa4\xaa\x17\xa2\xd5\x25\x8c\xa1\xec\x9f\xf1\x27\x17\xe5\x77\x3a\x64\xff\x94\x2c\x9a\x42\x49\x03\xcf\x94\xc6\xaa\x6d\x2a\xec\x9d\xe1\xe9\xd0\x9c\x5d\x8e\xae\x85\xe3\x9a\x2c\x0a\x67\xfc\x49\xd5\x31\x34\xf2\x7f\x99\x4c\x97\xc9\x6b\xa5\x6e\x73\xf8\xaf\x77\xf9\xd7\xb0\xa5\xfc\x7d\x2d\x9c\x40\x68\x0f\x27\x65\xfa\xd0\x31\xde\xe1\xd5\x6f\xc8\x42\xf6\xf4\x1c\x3c\x6f\x8b\xfa\xd7\x4c\xdb\x50\xe4\x27\x39\x5c\x70\x6d\xe0\x57\x69\xe3\xe0\xcd\xf9\x4d\xa1\x37\xb7\xcd\xcf\x2a\xbb\x7f\xd6\xab\x91\x0c\x7e\x8f\xbb\xb1\x46\xe2\x59\xdc\xfd\x17\x12\xf6\x24\x14\x0e\x02\x1b\xd4\xa0\x5b\x37\xf6\x60\xa3\x8e\xa7\xa0\x4e\x76\x8a\x14\x3a\x36\xc8\x8f\x8e\x86\xe0\x54\xf2\x28\xd4\x90\xc0\xb8\xfb\x09\xb5\xd6\x83\x1a\xdf\x70\x22\x68\xf8\x4b\x8a\xd2\x6c\x6a\xa1\xc9\xe0\x0e\x06\x08\xd6\x9a\xb5\x38\x46\xbe\x47\x4d\x72\x8a\x17\x05\xfa\x34\x9a\x68\xc1\xae\x35\x2f\x36\x34\xd1\xce\x9a\xcd\x93\x1d\xdc\x18\x95\xde\x82\xc5\xd5\x6e\xe6\xbd\x9e\x1f\xa0\x8d\x64\xc5\x53\xab\xf4\x7d\xa5\x9a\x71\xcb\xfd\x99\xf7\xb0\xd5\x74\x21\xd1\xc9\x24\x75\x61\x35\x70\x02\xa5\x13\x89\xa3\x9d\x59\x9c\x9e\x46\xec\x88\x09\x95\x72\x32\x90\x6c\x94\xb1\xf8\x1e\x9d\x92\x4e\xd4\xc4\x4c\x36\x4c\xa5\x6f\xd0\xc0\xe7\x7d\xb7\x8a\x83\xb7\xf1\xe6\xe3\xee\xa0\x44\xc9\x77\x60\x0c\x5f\x43\xdc\x3a\xb7\xad\x17\x86\x53\x36\x36\x06\xfb\xed\xe2\xc3\xfb\xa4\x22\x05\x27\x95\x90\xad\xf9\x60\xec\x8e\x21\xa9\xcd\x5f\xc0\x1d\xcb\xa5\x73\x6a\x94\xbf\x66\xfd\xca\x13\xbf\x1e\x8c\xf1\xfb\x9e\x0f\xc6\xa1\x13\xd2\xec\x3b\x01\x49\xdb\xcc\xe7\xd6\x16\x0d\xfd\x8c\x7a\xb9\x36\x54\x97\x0f\x0c\x6a\x87\x50\x0b\xef\x9c\x9e\xf2\x2c\x63\xe7\x98\x84\xde\x72\xa8\x11\x1e\x3d\xe2\xb8\x2b\x11\x1e\xbc\x0f\xfb\xf7\xe0\x8c\x5c\x98\x4d\xf1\x0e\x5a\xa2\x32\x39\x73\xf7\x5f\x98\x4f\x6e\x10\x80\xdb\x00\x49\x4c\xb5\x51\xc7\x99\x23\x88\x6b\x32\x1a\x61\x4c\xb2\x0d\xce\x35\x06\xec\x27\xf6\x72\x0a\x02\x04\xbd\xcd\xef\x55\x4f\xeb\xe4\xd5\x78\xbc\x23\xd3\xa8\xd1\x11\xeb\x04\x14\x29\x6e\x2a\x01\x09\x68\xad\x74\x1c\x65\x65\x21\x72\x6c\x25\x20\x12\xa8\x14\xbb\x32\x65\x3f\x50\xa7\xf9\x15\x8c\x7d\xc6\x4a\x9d\x2f\x68\x9d\x0e\xc3\x6f\x63\x93\xfc\x8d\xb2\x7f\x49\x25\xb2\x45\x74\xcc\x7c\xc7\x8e\x69\x5d\xc2\x8e\xd6\x03\xf4\xdf\xa0\x3a\x75\xdd\x75\x76\xa8\x40\xa6\xee\x85\xbb\xe4\x4d\xa9\x2b\x7e\xa8\xca\xe8\x17\x99\x5d\xe6\xd8\xa6\x96\x6f\x0b\x76\x52\xed\xb7\xef\x8f\x4f\x77\x4d\x8f\x1e\xc3\x50\xc3\x13\xbd\x78\x74\x7a\x67\x16\xd5\xdf\xe3\x76\xad\xe9\xcf\x85\xfb\xe0\xed\xdc\xcb\x74\x31\xfe\xf6\xef\x1e\x8f\x9a\x0c\xc8\x2c\x8e\x48\x3e\x9a\x0f\x09\xa1\xe1\xb6\x86\xc9\x49\x89\x08\xbc\xe2\x5d\x4c\xb5\xd5\x4a\x08\xfa\xc1\x81\xca\xf2\xf7\xdc\xd8\xd7\x56\x0b\x8f\x7f\x59\x7c\x68\x52\x45\xbf\x28\x34\xdc\xec\xbc\xa8\x97\x93\x86\x2e\x9b\xcd\xea\x75\xe9\xef\x9b\x8d\xda\xbd\x01\xcb\x73\x81\x52\x1d\xa9\xc3\x27\x90\xb6\x4a\xbb\x1f\x95\xd3\x01\x01\xa9\x85\xec\x63\x55\xdf\x28\xd3\xbf\x6b\xad\x26\xce\xaf\x2c\x24\x69\xa9\x35\xfe\xbf\xe4\x1a\x6f\xdd\x3e\xab\x0d\x8d\xa9\xdd\x10\xc0\xc3\x90\x4c\x82\x13\x01\x96\xbd\xb1\xf7\x02\xb0\x00\xa3\x31\xa0\x21\x4f\xd5\x0e\x7d\xb2\xba\x13\x3d\x8c\xad\x1e\xd9\xba\xe1\xe9\xed\x5a\xab\x52\x66\x27\xa9\x12\x4a\x2f\x98\xc8\xd7\x1b\xbc\x2d\x01\xa4\x3b\x67\xef\xa3\x87\x41\x35\xbc\xd4\x42\x37\x80\x2c\xc4\xa3\x54\xbe\x8f\x60\x52\xc7\xa2\x9e\x78\x70\xb2\xf0\xbe\x4b\x90\x33\x0f\xcd\x78\x41\xf6\x7c\x60\xae\x90\xa5\x10\x81\xb0\xfb\xb0\x76\x42\xcd\xb6\x3f\x80\xd6\x3f\x20\xf5\xb6\x95\xc6\x50\x68\xa7\x6d\xe1\x66\xdf\x15\x29\xf5\x09\x0d\x65\xd8\x05\xff\x04\x00\x00\xff\xff\x55\x2a\xee\x0a\x8e\x13\x00\x00")

func staticMainJsBytes() ([]byte, error) {
	return bindataRead(
		_staticMainJs,
		"static/main.js",
	)
}

func staticMainJs() (*asset, error) {
	bytes, err := staticMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.js", size: 5006, mode: os.FileMode(511), modTime: time.Unix(1453812976, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
	"static/main.css": staticMainCss,
	"static/main.js": staticMainJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
		"main.css": &bintree{staticMainCss, map[string]*bintree{}},
		"main.js": &bintree{staticMainJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

